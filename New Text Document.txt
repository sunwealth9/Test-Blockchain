Creating a new blockchain with SHA-256 as the hashing function and requiring hashes to start with four zeros is a challenging but interesting task. Here's a simplified version of how you could approach it:

1. **Define Block Structure**: Each block in the blockchain will have a structure consisting of:
   - Index: The position of the block in the chain.
   - Timestamp: The time when the block was created.
   - Data: The actual data stored in the block (transactions, messages, etc.).
   - Previous Hash: The hash of the previous block in the chain.
   - Nonce: A random number used in the mining process.
   - Hash: The hash of the current block.

2. **Genesis Block**: Create the first block of the chain, called the Genesis block. This block has no previous hash and acts as the initial point of the blockchain.

3. **Mining Algorithm**: Implement a mining algorithm where miners try to find a nonce that, when combined with the block's other data, produces a hash with four leading zeros when hashed using SHA-256.

4. **Add Blocks**: As miners find valid hashes for new blocks, add them to the blockchain, ensuring that each new block's `previous_hash` matches the hash of the previous block.

5. **Consensus Mechanism**: Establish a consensus mechanism (e.g., proof of work) to ensure agreement on the valid chain among all participants in the network.

6. **Network Implementation**: Develop the network layer for nodes to communicate and synchronize their copies of the blockchain.

7. **Security Measures**: Implement security measures to prevent attacks such as double spending, 51% attacks, etc.

Here's a Python-like pseudocode for a simple blockchain implementation with the described properties:

```python
import hashlib
import time

class Block:
    def __init__(self, index, timestamp, data, previous_hash):
        self.index = index
        self.timestamp = timestamp
        self.data = data
        self.previous_hash = previous_hash
        self.nonce = 0
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        while True:
            hash_str = str(self.index) + str(self.timestamp) + str(self.data) + str(self.previous_hash) + str(self.nonce)
            hash_encoded = hashlib.sha256(hash_str.encode()).hexdigest()
            if hash_encoded.startswith("0000"):
                return hash_encoded
            self.nonce += 1

class Blockchain:
    def __init__(self):
        self.chain = [self.create_genesis_block()]

    def create_genesis_block(self):
        return Block(0, time.time(), "Genesis Block", "0")

    def get_latest_block(self):
        return self.chain[-1]

    def add_block(self, new_block):
        new_block.previous_hash = self.get_latest_block().hash
        new_block.hash = new_block.calculate_hash()
        self.chain.append(new_block)

# Usage
my_blockchain = Blockchain()
my_blockchain.add_block(Block(1, time.time(), "Data", ""))
```

Remember, this is a basic implementation. Real-world blockchain systems require more complexity and considerations for security, scalability, and efficiency.